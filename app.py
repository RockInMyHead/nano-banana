from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import os
import httpx
import base64
import uuid
import time
import json
from datetime import datetime
from dotenv import load_dotenv
from PIL import Image, ImageOps
from io import BytesIO
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini API
GEMINI_MODEL = "gemini-2.5-flash-image"
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent"
API_KEY = os.getenv("GEMINI_API_KEY") or "AIzaSyABXLCOQx43FNOetOJNZNmxMhTmU33W7Rs"

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ENABLE_IMAGE_GENERATION = True
IMAGE_GENERATION_MESSAGE = "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
UPLOAD_FOLDER = 'generated_images'
METADATA_FILE = os.path.join(UPLOAD_FOLDER, 'metadata.json')

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

def load_metadata():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if os.path.exists(METADATA_FILE):
        try:
            with open(METADATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_metadata(metadata):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        with open(METADATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")

def add_image_metadata(filename, width, height, prompt, model, generation_time):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    metadata = load_metadata()
    metadata[filename] = {
        'width': width,
        'height': height,
        'prompt': prompt,
        'model': model,
        'generation_time': generation_time,
        'created': datetime.now().isoformat()
    }
    save_metadata(metadata)

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

async def fill_black_borders(img, prompt: str) -> Image.Image:
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —á–µ—Ä–Ω—ã–µ –ø–æ–ª–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if img.mode != 'RGB':
        img = img.convert('RGB')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    width, height = img.size
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (—Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É –∏ —Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞)
    black_threshold = 30
    border_size = int(min(width, height) * 0.05)  # 5% –æ—Ç –º–µ–Ω—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –æ–±–ª–∞—Å—Ç—å
    top_black = False
    if border_size > 0:
        top_pixels = sum(1 for x in range(width) for y in range(min(border_size, height))
                        if all(img.getpixel((x, y))[c] < black_threshold for c in range(3)))
        top_black = top_pixels > (width * border_size * 0.8)  # 80% —á–µ—Ä–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∂–Ω—é—é –æ–±–ª–∞—Å—Ç—å
    bottom_black = False
    if border_size > 0 and height > border_size:
        bottom_pixels = sum(1 for x in range(width) for y in range(max(0, height - border_size), height)
                           if all(img.getpixel((x, y))[c] < black_threshold for c in range(3)))
        bottom_black = bottom_pixels > (width * border_size * 0.8)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤—É—é –æ–±–ª–∞—Å—Ç—å
    left_black = False
    if border_size > 0:
        left_pixels = sum(1 for x in range(min(border_size, width)) for y in range(height)
                         if all(img.getpixel((x, y))[c] < black_threshold for c in range(3)))
        left_black = left_pixels > (border_size * height * 0.8)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤—É—é –æ–±–ª–∞—Å—Ç—å
    right_black = False
    if border_size > 0 and width > border_size:
        right_pixels = sum(1 for x in range(max(0, width - border_size), width) for y in range(height)
                          if all(img.getpixel((x, y))[c] < black_threshold for c in range(3)))
        right_black = right_pixels > (border_size * height * 0.8)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —á–µ—Ä–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    if not (top_black or bottom_black or left_black or right_black):
        logger.info("–ß–µ—Ä–Ω—ã–µ –ø–æ–ª–æ—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        return img
    
    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —á–µ—Ä–Ω—ã–µ –ø–æ–ª–æ—Å—ã: –≤–µ—Ä—Ö={top_black}, –Ω–∏–∑={bottom_black}, –ª–µ–≤–æ={left_black}, –ø—Ä–∞–≤–æ={right_black}")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Gemini
        img_buffer = BytesIO()
        img.save(img_buffer, format='PNG')
        img_b64 = base64.b64encode(img_buffer.getvalue()).decode()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–æ—Å
        border_types = []
        if top_black:
            border_types.append("top")
        if bottom_black:
            border_types.append("bottom")
        if left_black:
            border_types.append("left")
        if right_black:
            border_types.append("right")
        
        border_description = ", ".join(border_types)
        extend_prompt = f"Extend the image to fill the black border areas on the {border_description} side(s) with matching content from the original scene. Seamlessly continue the existing composition. {prompt}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        payload = {
            "contents": [
                {
                    "parts": [
                        { "text": extend_prompt },
                        {
                            "inline_data": {
                                "mime_type": "image/png",
                                "data": img_b64
                            }
                        }
                    ]
                }
            ]
        }

        headers = {
            "Content-Type": "application/json",
            "x-goog-api-key": API_KEY
        }

        async with httpx.AsyncClient() as client:
            resp = await client.post(GEMINI_URL, headers=headers, json=payload, timeout=60)
            resp.raise_for_status()
            resp_json = resp.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            for candidate in resp_json.get("candidates", []):
                for part in candidate.get("content", {}).get("parts", []):
                    inline = part.get("inlineData") or part.get("inline_data")
                    if inline and inline.get("data"):
                        extended_data = base64.b64decode(inline["data"])
                        with Image.open(BytesIO(extended_data)) as extended_img:
                            extended_img = extended_img.convert('RGB')
                            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                            result = extended_img.resize((width, height), Image.Resampling.LANCZOS)
                            logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–æ")
                            return result
            
            raise Exception("No extended image in response")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return img

async def generate_image_with_retry(prompt: str, max_retries: int = 3) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫–≤–æ—Ç—ã"""
    for attempt in range(max_retries):
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Gemini API
            payload = {
                "contents": [
                    {
                        "parts": [
                            { "text": prompt }
                        ]
                    }
                ]
            }

            headers = {
                "Content-Type": "application/json",
                "x-goog-api-key": API_KEY
            }

            async with httpx.AsyncClient() as client:
                resp = await client.post(GEMINI_URL, headers=headers, json=payload, timeout=60)
                
                if resp.status_code == 429:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∫–≤–æ—Ç—ã
                    error_data = resp.json()
                    retry_after = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –æ—à–∏–±–∫–∏
                    try:
                        details = error_data.get("error", {}).get("details", [])
                        for detail in details:
                            if detail.get("@type") == "type.googleapis.com/google.rpc.RetryInfo":
                                retry_info = detail.get("retryDelay", "")
                                if retry_info.endswith("s"):
                                    retry_after = int(float(retry_info[:-1]))
                                    break
                    except:
                        pass
                    
                    if attempt < max_retries - 1:
                        logger.warning(f"Quota exceeded, retrying in {retry_after} seconds (attempt {attempt + 1}/{max_retries})")
                        await asyncio.sleep(retry_after)
                        continue
                    else:
                        raise Exception(f"Quota exceeded after {max_retries} attempts")
                
                resp.raise_for_status()
                resp_json = resp.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                for candidate in resp_json.get("candidates", []):
                    for part in candidate.get("content", {}).get("parts", []):
                        inline = part.get("inlineData") or part.get("inline_data")
                        if inline and inline.get("data"):
                            return inline["data"]
                
                raise Exception("No image in response")
                
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 429:
                if attempt < max_retries - 1:
                    continue
                else:
                    raise Exception(f"HTTP Error: {e.response.status_code} ‚Äî {e.response.text}")
            else:
                raise Exception(f"HTTP Error: {e.response.status_code} ‚Äî {e.response.text}")
        except Exception as e:
            if attempt < max_retries - 1:
                logger.warning(f"Error on attempt {attempt + 1}, retrying: {e}")
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
                continue
            else:
                raise

@app.post("/generate")
async def generate(request: Request):
    if API_KEY is None:
        logger.error("GEMINI_API_KEY not set")
        return JSONResponse({"error": "Server misconfiguration: GEMINI_API_KEY not set"}, status_code=500)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not ENABLE_IMAGE_GENERATION:
        return JSONResponse({"error": IMAGE_GENERATION_MESSAGE}, status_code=503)
    
    try:
        data = await request.json()
        prompt = data.get("prompt")
        if not prompt:
            return JSONResponse({"error": "Prompt missing"}, status_code=400)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        img_b64 = await generate_image_with_retry(prompt)
        return JSONResponse({"image_b64": img_b64})
        
    except Exception as e:
        logger.exception("Unexpected error in generate")
        return JSONResponse({"error": f"Internal error: {str(e)}"}, status_code=500)

@app.post("/save_image")
async def save_image(request: Request):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ base64 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        data = await request.json()
        image_b64 = data.get("image_b64")
        prompt = data.get("prompt", "Unknown prompt")
        width = data.get("width", 1024)
        height = data.get("height", 1024)
        
        if not image_b64:
            return JSONResponse({"error": "No image data provided"}, status_code=400)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        try:
            image_data = base64.b64decode(image_b64)
        except Exception as e:
            return JSONResponse({"error": f"Invalid base64 data: {str(e)}"}, status_code=400)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"image_{uuid.uuid4().hex[:8]}_{int(time.time())}.png"
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
        try:
            with Image.open(BytesIO(image_data)) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                original_size = img.size
                logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç Gemini: {original_size}")
                logger.info(f"–¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: {width}x{height}")

                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ë–ï–ó –æ–±—Ä–µ–∑–∫–∏
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (—É–º–µ–Ω—å—à–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å)
                ratio = min(width / original_size[0], height / original_size[1])
                new_size = (int(original_size[0] * ratio), int(original_size[1] * ratio))
                
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = img.resize(new_size, Image.Resampling.LANCZOS)
                logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {img.size}")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º
                result = Image.new('RGB', (width, height), (0, 0, 0))
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                paste_x = (width - new_size[0]) // 2
                paste_y = (height - new_size[1]) // 2
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                result.paste(img, (paste_x, paste_y))
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏—é: ({paste_x}, {paste_y})")
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–Ω—ã–µ –ø–æ–ª–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                result = await fill_black_borders(result, prompt)
                
                logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {result.size}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
                result.save(filepath, 'PNG')
                actual_width, actual_height = result.size
                
        except Exception as e:
            # –ï—Å–ª–∏ PIL –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            with open(filepath, 'wb') as f:
                f.write(image_data)
            actual_width, actual_height = width, height
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        generation_time = 0  # –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ
        add_image_metadata(filename, actual_width, actual_height, prompt, "Gemini 2.5 Flash", generation_time)
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(filepath)
        
        return JSONResponse({
            "success": True,
            "filename": filename,
            "width": actual_width,
            "height": actual_height,
            "model": "Gemini 2.5 Flash",
            "generation_time": generation_time,
            "file_size": file_size,
            "prompt": prompt,
            "created": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.exception("Error saving image")
        return JSONResponse({"error": f"Error saving image: {str(e)}"}, status_code=500)

@app.get("/images")
async def list_images():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        metadata = load_metadata()
        images = []
        
        for filename in os.listdir(UPLOAD_FOLDER):
            if filename.endswith('.png'):
                filepath = os.path.join(UPLOAD_FOLDER, filename)
                if os.path.isfile(filepath):
                    file_size = os.path.getsize(filepath)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    img_metadata = metadata.get(filename, {})
                    
                    images.append({
                        'filename': filename,
                        'size': file_size,
                        'width': img_metadata.get('width', 'Unknown'),
                        'height': img_metadata.get('height', 'Unknown'),
                        'prompt': img_metadata.get('prompt', 'Unknown'),
                        'model': img_metadata.get('model', 'Unknown'),
                        'generation_time': img_metadata.get('generation_time', 0),
                        'created': img_metadata.get('created', 'Unknown')
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        images.sort(key=lambda x: x['created'], reverse=True)
        
        return JSONResponse({'images': images})
        
    except Exception as e:
        logger.exception("Error listing images")
        return JSONResponse({"error": f"Error listing images: {str(e)}"}, status_code=500)

@app.get("/generated_images/{filename}")
async def serve_image(filename: str):
    """–û—Ç–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    try:
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        if os.path.exists(filepath):
            return FileResponse(filepath)
        else:
            raise HTTPException(status_code=404, detail="Image not found")
    except Exception as e:
        logger.exception(f"Error serving image {filename}")
        raise HTTPException(status_code=500, detail=f"Error serving image: {str(e)}")

@app.get("/download/{filename}")
async def download_image(filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        if os.path.exists(filepath):
            return FileResponse(
                filepath, 
                media_type='application/octet-stream',
                filename=filename
            )
        else:
            raise HTTPException(status_code=404, detail="File not found")
    except Exception as e:
        logger.exception(f"Error downloading image {filename}")
        raise HTTPException(status_code=500, detail=f"Error downloading image: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8083")
    uvicorn.run(app, host="0.0.0.0", port=8083)