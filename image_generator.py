import requests
import time
import asyncio
import aiohttp

def generate_image_fast(prompt, width=1024, height=1024):
    """
    –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–π API
    """
    try:
        url = f"https://image.pollinations.ai/prompt/{prompt}?width={width}&height={height}&nologo=true"
        
        print(f"üöÄ –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        start_time = time.time()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response = requests.get(url, timeout=10)
        
        end_time = time.time()
        generation_time = end_time - start_time
        
        if response.status_code == 200:
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {generation_time:.2f} —Å–µ–∫")
            return response.content, generation_time
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return None, generation_time
            
    except Exception as e:
        end_time = time.time()
        generation_time = end_time - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, generation_time

def generate_multiple_images(prompt, count=3):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ API)
    """
    print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    total_start = time.time()
    results = []
    total_generation_time = 0
    
    for i in range(count):
        print(f"\nüì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}/{count}:")
        result = generate_image_fast(prompt)
        
        if result[0] is not None:
            results.append(result)
            total_generation_time += result[1]
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –≥–æ—Ç–æ–≤–æ")
        else:
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    total_time = time.time() - total_start
    return results, total_time, total_generation_time

def save_images_fast(results):
    """
    –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    print(f"\nüíæ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    save_start = time.time()
    
    for i, (image_data, gen_time) in enumerate(results):
        filename = f"hogwarts_castle_fast_{i+1}.png"
        with open(filename, "wb") as f:
            f.write(image_data)
        print(f"‚úÖ {filename}")
    
    save_time = time.time() - save_start
    return save_time

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    prompt = "Hogwarts castle, magical school, Harry Potter, magnificent gothic architecture, towering spires, colorful stained glass windows, golden hour lighting, magical floating candles, mystical fog, vibrant autumn colors, detailed stone walls, enchanted forest background, magical atmosphere, cinematic lighting, ultra detailed, 4K resolution, fantasy art"
    
    print("‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"–ü—Ä–æ–º–ø—Ç: {prompt}")
    print("=" * 50)
    
    total_start_time = time.time()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    results, total_time, total_generation_time = generate_multiple_images(prompt, count=1)
    
    # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    save_time = save_images_fast(results)
    
    total_end_time = time.time()
    total_execution_time = total_end_time - total_start_time
    
    print(f"\nüìä –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {total_generation_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    if len(results) > 0:
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {total_generation_time/len(results):.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(results)/total_generation_time:.2f} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å–µ–∫")
        print(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_generation_time/total_execution_time*100:.1f}%")
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    overhead_time = total_execution_time - total_generation_time - save_time
    print(f"\nüîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏:")
    print(f"   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {total_generation_time:.2f} —Å–µ–∫ ({total_generation_time/total_execution_time*100:.1f}%)")
    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {save_time:.2f} —Å–µ–∫ ({save_time/total_execution_time*100:.1f}%)")
    print(f"   –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {overhead_time:.2f} —Å–µ–∫ ({overhead_time/total_execution_time*100:.1f}%)")
    
    print(f"\n‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print(f"   ‚úÖ –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π API (Pollinations)")
    print(f"   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã")
    print(f"   ‚úÖ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
    print(f"   ‚úÖ –ù–µ—Ç –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"   ‚úÖ –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    print(f"\n–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ.")
